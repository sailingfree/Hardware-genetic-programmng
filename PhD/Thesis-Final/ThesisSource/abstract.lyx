#LyX 1.2 created this file. For more info see http://www.lyx.org/
\lyxformat 220
\textclass essex
\begin_preamble
\input{shortheader.tex}
\end_preamble
\options oneside
\language british
\inputencoding auto
\fontscheme pslatex
\graphics default
\paperfontsize 11
\spacing other 1.40 
\papersize Default
\paperpackage a4
\use_geometry 0
\use_amsmath 0
\use_natbib 0
\use_numerical_citations 0
\paperorientation portrait
\secnumdepth 2
\tocdepth 2
\paragraph_separation indent
\defskip medskip
\quotes_language english
\quotes_times 2
\papercolumns 1
\papersides 1
\paperpagestyle fancy

\layout Standard

This thesis describes a hardware implementation of a complete 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
acf{GP}
\end_inset 

 system using a 
\begin_inset ERT
status Open

\layout Standard

\backslash 
acl{FPGA}
\end_inset 

, which is shown to speed-up GP by over 400 times when compared with a software
 implementation of the same algorithm.
 The hardware implements the creation of the initial population, breeding
 operators, parallel fitness evaluations and the output of the final result.
\layout Standard

The research was motivated by the observation that GP is usually implemented
 in software and run on general purpose computers.
 Although software implementations are flexible and easy to modify, they
 limit the performance of GP thus restricting the range of problems that
 GP can solve.
 The hypothesis is that implementing GP in hardware would speed up GP, allowing
 it to tackle problems which are currently too hard for software based GP.
\layout Standard

FPGAs are usually programmed using specialised hardware design languages.
 An alternative approach is used in this work that uses a high level language
 to hardware compilation system, called Handel-C.
\layout Standard

As part of this research, a number of general GP issues are also explored.
 The parameters of GP are described and arranged into a 
\emph on 
taxonomy of GP attributes
\emph default 
.
 The taxonomy allows GP problems to be categorised with respect to their
 problem and GP specific attributes.
 The role that the GP algorithm plays in problem solving is shown to be
 part of a larger process called 
\emph on 
Meta-GP
\emph default 
, which describes the overall process of developing a GP system and evolving
 a viable set of parameters to allow GP to solve a problem.
 Three crossover operators are investigated and a new operator, called 
\emph on 
single child limiting
\emph default 
 crossover, is presented.
 This operator appears to limit the tendency of GP to suffer from bloat.
 The economics of implementing GP in hardware are analysed and the costs
 and benefits are quantified.
 The thesis concludes by suggesting some applications for hardware GP.
\the_end
